attribute vec4 a_Position;
attribute vec4 a_Color;
attribute vec4 a_Normal;
uniform mat4 u_MVPMatrix;
uniform mat4 u_ModelMatrix;
uniform mat4 u_NormalMatrix;
uniform vec3 u_LightColor;
uniform vec3 u_AmbientLight;
uniform vec3 u_LightPosition;
varying vec4 v_Color;
void main() {
    gl_Position = u_MVPMatrix*a_Position;

    //法向量归一
    vec3 normal =  normalize(vec3(u_NormalMatrix*a_Normal));

    //顶点的世界坐标
    vec4 vertexPosition = u_ModelMatrix * a_Position;

    //计算光的方向
    vec3 lightDirection = normalize(u_LightPosition-vec3(vertexPosition));

    //计算点积
    float nDotL=max(dot(lightDirection,normal),0.0);
    vec3 diffuse = u_LightColor* a_Color.rgb*nDotL;
    vec3 ambient = u_AmbientLight*a_Color.rgb;
    v_Color=vec4(diffuse+ambient,a_Color.a);
}